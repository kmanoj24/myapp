c
exit
Actor.select("first_name").uniq.count
Actor.select("first_name").uniq
Actor.select("first_name").group_by {|actor| actor.first_name}.keys.count
Actor.select("first_name").count
Actor.select("first_name").group_by {|actor| actor.first_name}.keys
Actor.select("first_name").group_by {|actor| actor.first_name}
Actor.select("first_name")
Actor.all.to_a
Actor.all
Actor.first
@actors.group_by{ |actor| actor.last_name }
@actors.group_by{ |actor| actor.last_name }.values
@actors.group_by{ |actor| actor.last_name }.keys
@actors.group_by{ |actor| actor.last_name }
@actors.group_by{|actor| actor.last_name }
@actors
n
c
puts JSON.pretty_generate(JSON.parse(@actors))
require 'json'
puts JSON.pretty_generate(JSON.parse(response))
@actors
@actors.group_by{|last_name| last_name }.keys
@actors.group_by{|last_name| last_name }.keys.to_a
@actors.group_by{|last_name| last_name }.keys
@actors.group_by{|last_name| last_name }
puts JSON.pretty_generate(@actors)
n
require 'json'
c
puts JSON.pretty_generate(@actors)
require 'json'
@actors.group_by{|last_name| last_name=="Guiness" }.map {|k,v| v}.size
@actors.group_by{|last_name| last_name=="Guiness" }.map {|k,v| v}.count
@actors.group_by{|last_name| last_name=="Guiness" }.map {|k,v| v}
@actors.group_by{|last_name| last_name=="Guiness" }.count
@actors.group_by{|last_name| last_name=="Guiness" }
@actors.group_by{|last_name| last_name }
@actors.group_by{|last_name| last_name}
@actors.group_by{|last_name| last_name}.pluck.keys
@actors.group_by{|last_name| last_name}.keys
@actors.group_by{|last_name| last_name}
@actors.first
@actors.count
@actors
n
params
request
c
exit
clear
ls
clr
cls
cl
clear
request.remote_ip
request.
request.body
request.params
request.query_string
request.query
request.path
request.url
request.method
request.headers["Content-Type"]
request.headers
request.headers       # Full headers as a Rack::Utils::HeaderHash
request.headers["Content-Type"]  # e.g., "application/json"
request.user_agent
request.cookies
request.cocckies
request.session
request.body.read
request.body
request
Address.count
Store.count
Customer.count
Film.count
Actor.where("first_name LIKE ?", "B%").pluck("first_name", "last_name")
Actor.where("first_name LIKE ?", "B%").pluck("fisrt_name", "last_name")
Actor.where("first_name LIKE ?", "B%").pluck("first_name")
Actor.where("first_name LIKE ?", "B%")
Actor.where("first_name LIKE ?", "B%").pluck
Actor.where("first_name LIKE ?", "B%")
Actor.select("first_name")
Actor.select(first_name)
Actor.count
Actor.all
Actorl.all
c
n
c
n
user
n
c
@user.errors.full_messages
@user.valid?
@user.persist?
@user.save
n
user_params
c
params[:session][:password]
user
n
User.find_by(email: params[:session][:email])
params[:session][:email]
params[:email]
params
User.find_by(email: params[:session][:email]
c
Actor.find_by(id: actor_id)
actor_id
new_name
old_name
c
Actor.where("first_name LIKE ? AND first_name LIKE ?", "G%", "%a").count
Actor.where("first_name LIKE ? AND first_name LIKE ?", "G%", "%a")
Actor.where("first_name LIKE ? AND last_name LIKE ?", "G%", "%a")
Actor.where("first_name LIKE ? AND last_name LIKE ?", "G%", "%a").count
Actor.where("first_name LIKE ?", "G%").map{|f| f.first_name}
Actor.where("first_name LIKE ?", "G%").first_names
Actor.where("first_name LIKE ?", "G%").count
Actor.where("first_name LIKE ?", "G%")
c
image_url
image_prompt
c
image_prompt
image_url
c
image_prompt
image_url
c
open /var/folders/43/b4xsdrs10y5_69fjr9bcrvp80000gn/T/voice20250407-9591-sgiv40.mp3
file.path
File.exist?(file.path)
system("edge-tts --text \"#{text}\" --voice te-IN-ShrutiNeural --write-media \"#{file.path}\"")
file = Tempfile.new(["voice", ".mp3"])
c
client.fetch_access_token!
client.access_token
client
c
Net::HTTP.get_response(URI(url))
url
response
c
@forecast
address
c
address
@forecast
c
Actor.count
Actor.all
c
Actor.first.class
Actor.class
Actor.all.class
Actor.all
